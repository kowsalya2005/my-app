{"version":3,"sources":["SuccessPage.js","DisplayDetails.js","App.js","serviceWorker.js","index.js"],"names":["SuccessPage","className","this","props","isRegistration","id","onClick","closePage","React","Component","DisplayDetails","submitCompanyValue","companyDetails","setState","isShowCompany","submitOtpValue","alert","openModal","console","log","preview","event","document","getElementById","src","URL","createObjectURL","target","files","state","clgName","studentName","deptName","year","entryDate","initialValues","companyName","emailId","terms","yoe","digit1","validationSchema","Yup","shape","required","matches","handleSubmit","submitDetails","values","handleChange","handleBlur","touched","errors","name","onChange","href","alt","type","e","data","value","onBlur","jobTitle","App","submitValue","isShowLogin","formValues","fullName","gender","country","mobileNumber","checked","oneOf","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","basename","process","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9609e294.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nclass SuccessPage extends React.Component {\r\n\r\n      render() {\r\n\r\n        return (\r\n            <div className=\"DisplayDetails\">\r\n               {\r\n                this.props.isRegistration ? \r\n                 <><form id=\"successMessage\" className=\"form_group\">\r\n                 <h4>Your Registration Process Is Successfully Completed.</h4>\r\n                 <center><button id=\"submit\" className=\"button_flex ml_5\" onClick={this.closePage}>Close\r\n                 </button></center>\r\n                </form></> :\r\n                <>\r\n                </> \r\n    }\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\nexport default SuccessPage;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport SuccessPage from './SuccessPage';\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nclass DisplayDetails extends React.Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            isShowCompany: false,\r\n            isRegistration: true,\r\n            clgName: \"\",\r\n            studentName: \"\",\r\n            deptName: \"\",\r\n            year: \"\",\r\n            entryDate: 0,\r\n        }\r\n        this.initialValues ={\r\n            companyName:'',\r\n            emailId: '',\r\n            terms: '',\r\n            yoe: '',\r\n            digit1: '',\r\n        }\r\n        this.validationSchema=Yup.object().shape({\r\n            companyName:Yup.string().required('Company Name is Required'),\r\n            emailId: Yup.string().required().matches((/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-])/),\"Invalid Email\"),\r\n            terms:Yup.string().required('Terms & Condition is Required'),\r\n            yoe: Yup.string().required('Year of Experience is Required'),\r\n            digit1:Yup.string().required().matches((/^[0-9]{10}$/),\"Invalid Degits\"),\r\n        })\r\n    }\r\n\r\n    submitCompanyValue = () => {\r\n        const {companyDetails} = this.props;\r\n        this.setState({\r\n            isShowCompany:true,\r\n            companyDetails: !companyDetails,\r\n        })\r\n    }\r\n    submitOtpValue = () => {\r\n        alert(\"Your registration is successfully completed\");\r\n        this.setState({\r\n            isRegistration: true,\r\n            openModal: true,\r\n        })\r\n    }\r\n    closePage = () => {\r\n        console.log('gggggg');\r\n        this.setState({\r\n            isRegistration: false,\r\n        })\r\n    }\r\n     preview =(event)=> {\r\n        let frame = document.getElementById('frame');\r\n        frame.src=URL.createObjectURL(event.target.files[0]);\r\n      }\r\n    render() {\r\nconsole.log(\"ggjjj\", this.state.isRegistration);\r\n        return (\r\n            <div className=\"DisplayDetails\">\r\n                {this.state.isShowCompany ? \r\n                <>\r\n                <header className=\"nav_bar\">Email Verification</header>\r\n                <div className=\"nav_header\">Enter Your OTP</div>\r\n                <div className=\"sub_title\">For your security, we need to verify your identity, We sent a 5-digit code to</div>\r\n                <div className=\"sub_title\">name@domain.com. Please enter it below.</div>\r\n                <Formik\r\n            initialValues={this.initialValues}\r\n            validationSchema={this.validationSchema}\r\n            handleSubmit={this.submitDetails}\r\n            >\r\n            {\r\n            ({values,handleChange,handleBlur,touched,errors,handleSubmit})=>\r\n                (\r\n                <form id=\"bookDetails\" className=\"form_group\">\r\n                    <label>Enter Your Code</label><br></br>\r\n                    <div className=\"input_box\">\r\n                    <input className=\"digit-group\" name=\"digit1\" id=\"digit1\" onChange={this.props.handleChange} />\r\n                    {touched.digit1 && errors.digit1 && <div id=\"name-error\" className=\"error\">{errors.digit1}</div> }\r\n                    <input className=\"digit-group\" name=\"digit2\" id=\"digit2\" onChange={this.props.handleChange} />\r\n                    <input className=\"digit-group\" name=\"digit3\" id=\"digit3\" onChange={this.props.handleChange} />\r\n                    <input className=\"digit-group\" name=\"digit4\" id=\"digit4\" onChange={this.props.handleChange} />\r\n                    <input className=\"digit-group\" name=\"digit5\" id=\"digit5\" onChange={this.props.handleChange} />\r\n                    </div>\r\n                    <hr></hr>\r\n                    <div className=\"mt_5\">\r\n                        Didn't receive the email? Check your spam filter for an email from <a className=\"link_color\"href=\"\">name@domain.com</a>\r\n                    </div>\r\n                    <button id=\"back\" className=\"button_flex\">Back</button>\r\n                    <button id=\"submit\" className=\"button_flex ml_5\" onClick={this.submitOtpValue}>Next</button>\r\n                </form>\r\n                  )\r\n                }\r\n                </Formik>\r\n               </> : <>\r\n               { this.state.isShowCompany === false ?\r\n               <>\r\n                <header className=\"nav_bar\">Company Details</header>\r\n                <div className=\"nav_header\">Add your company details</div>\r\n                <div className=\"sub_title\">Lorem lpsum is simply dummy text of the printing and typesetting industry</div>\r\n                <Formik\r\n            initialValues={this.initialValues}\r\n            validationSchema={this.validationSchema}\r\n            handleSubmit={this.submitDetails}\r\n            >\r\n            {\r\n            ({values,handleChange,handleBlur,touched,errors,handleSubmit})=>\r\n                (\r\n                <form id=\"bookDetails\" className=\"form_group\">\r\n                    <label>Upload your company logo</label><br></br>\r\n                    <div className=\"logo\">\r\n                <img id=\"frame\" alt=\"Avatar\" src=\"img_avatar.png\" className=\"logo_img\" />\r\n                <input className =\"ml_15 mt_20\" type=\"file\" onChange={(e, data) => { this.preview(e, data);}}/>\r\n                </div><br></br>\r\n                    <label>Company Name</label><br></br>\r\n                    <input className=\"input_label\" id=\"companyName\" name=\"companyName\" value={values.companyName} onBlur={handleBlur}/>\r\n                    {touched.companyName && errors.companyName && <div id=\"name-error\" className=\"error\">{errors.companyName}</div> }\r\n                    <br></br><br></br>\r\n                    <label>Email Id</label><br></br>\r\n                    <input className=\"input_label\" id=\"emailId\" name=\"emailId\" value={values.emailId} onBlur={handleBlur}/>\r\n                    {touched.emailId && errors.emailId && <div id=\"name-error\" className=\"error\">{errors.emailId}</div> }\r\n                    <br></br><br></br>\r\n                    <label>Job Title</label><br></br>\r\n                    <input className=\"input_label\" id=\"jobTitle\" name=\"jobTitle\" value={values.jobTitle} onBlur={handleBlur}/>\r\n                    {touched.jobTitle && errors.jobTitle && <div id=\"name-error\" className=\"error\">{errors.jobTitle}</div> }\r\n                    <br></br><br></br>\r\n                    <label>Year of Experience</label><br></br>\r\n                    <input className=\"input_label\" id=\"yoe\" name=\"yoe\" onBlur={handleBlur} value={values.yoe}/>\r\n                    {touched.yoe && errors.yoe && <div id=\"name-error\" className=\"error\">{errors.yoe}</div> }\r\n                    <br></br><br></br>\r\n                    <input  id=\"checkBox1\" type=\"checkbox\" name=\"terms\" onChange={this.props.handleChange} value={values.terms} onBlur={handleBlur}/>  I accept the <a className=\"link_color\" href=\"\">Terms and Condition</a><br></br><br></br>\r\n                    {touched.terms && errors.terms && <div id=\"name-error\" className=\"error\">{errors.terms}</div> }\r\n                    <button id=\"back\" className=\"button_flex\">Back</button>\r\n                    <button id=\"submit\" className=\"button_flex ml_5\" onClick={this.submitCompanyValue}>Next</button>\r\n                </form>\r\n                  )\r\n                }\r\n                </Formik>\r\n                 <br></br>\r\n                <div className=\"sub_title\">Already have an account? <a className=\"link_color\"href=\"\">Log in</a></div>\r\n    </>:<></>}\r\n                </>\r\n                }\r\n                {\r\n                this.state.isRegistration ? \r\n                 <><SuccessPage \r\n                 isRegistration={this.props.isRegistration}\r\n                 closePage={this.closePage}\r\n                 /></> :\r\n                <>\r\n                </> \r\n    }\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\nexport default DisplayDetails;\r\n","import React from 'react';\nimport './App.css';\nimport DisplayDetails from './DisplayDetails';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\n\nclass App extends React.Component {\n\n\n    constructor() {\n        super()\n        this.state = {\n            isShowLogin: true,\n            companyDetails: false,\n            fullName: \"\",\n            gender: \"\",\n            country: \"\",\n            state: \"\",\n            mobileNumber: '',\n            formValues: '',\n        }\n        this.initialValues ={\n            fullName:'',\n            checked: false,\n            gender: false,\n            country: '',\n            state: '',\n            mobileNumber: '',\n        }\n        this.validationSchema=Yup.object().shape({\n            fullName:Yup.string().required('Full Name is Required'),\n            checked: Yup.bool().oneOf([true], 'Gender is Required'),\n            country:Yup.string().required('Country is Required'),\n            state: Yup.string().required('State is Required'),\n            mobileNumber:Yup.string().required().matches((/^[0-9]{10}$/),\"Invalid MobileNumber\"),\n        })\n    }\n    \n\n    handleChange = (e) => {\n        console.log(\"values\",e.target.name,e.target.value)\n        this.setState({\n            [e.target.name]: e.target.value,\n        })\n    }\n\n    submitValue = (values) => {\n        this.setState({\n            isShowLogin:false,\n            companyDetails: true,\n            formValues: values,\n        })\n    }\n\n\n    render() {\n        return (\n            <div className=\"App\">\n\n                {this.state.isShowLogin ?\n                <>\n                <header className=\"nav_bar\">Personal Details</header>\n                <div className=\"nav_header\">Add your personal details</div>\n                <div className=\"sub_title\">Lorem lpsum is simply dummy text of the printing and typesetting industry</div>\n                <Formik\n            initialValues={this.initialValues}\n            validationSchema={this.validationSchema}\n            handleSubmit={this.submitDetails}\n            >\n            {\n            ({values,handleChange,handleBlur,touched,errors,handleSubmit})=>\n                (\n                    <form id=\"libraryLogin\" className=\"form_group\">\n                        <label>Full Name</label><br></br>\n                        <input className=\"input_label\" id=\"fullName\" type=\"text\" name=\"fullName\" value={values.fullName} onChange={handleChange} onBlur={handleBlur} required/><br></br><br></br>\n                        {touched.fullName && errors.fullName && <div id=\"name-error\" className=\"error\">{errors.fullName}</div> }\n                        <label>Gender</label><br></br>\n                        <div className=\"mt_5\">\n                        <input  id=\"checkBox1\" type=\"checkbox\" name=\"male\" onChange={handleChange} value={values.checked}/>  Male\n                        <input className=\"ml_15\" id=\"checkBox1\" type=\"checkbox\" name=\"male\" value={values.checked}onChange={handleChange}/>  Female\n                        <input className=\"ml_15\" id=\"checkBox1\" type=\"checkbox\" name=\"male\" value={values.checked} onChange={handleChange}/>  Other<br></br><br></br>\n                        {touched.gender && errors.gender && <div id=\"name-error\" className=\"error\">{errors.gender}</div> }\n                        </div>\n                        <label>Country</label><br></br>\n                        <select type=\"text\" name=\"country\" id=\"country\" onChange={handleChange} required>\n                        <option>India</option>\n                        <option>Canada</option>\n                        <option>China</option>\n                        <option>USA</option>\n                        <option>UK</option>\n                        </select>\n                        {touched.country && errors.country && <div id=\"name-error\" className=\"error\">{errors.country}</div> }\n                        <br></br><br></br>\n                        <label>State</label><br></br>\n                        <select type=\"text\" name=\"state\" id=\"state\" onChange={handleChange} required>\n                        <option>TamilNadu</option>\n                        <option>Assam</option>\n                        <option>Bihar</option>\n                        <option>Goa</option>\n                        <option>Gujarat</option>\n                        </select>\n                        {touched.state && errors.state && <div id=\"name-error\" className=\"error\">{errors.state}</div> }\n                        <br></br><br></br>\n                        <label>Phone Number</label><br></br>\n                        <input className=\"input_label\" id=\"mobileNumber\" value={values.mobileNumber} type=\"number\" name=\"mobileNumber\" required onChange={handleChange} /><br></br><br></br>\n                        {touched.mobileNumber && errors.mobileNumber && <div id=\"name-error\" className=\"error\">{errors.mobileNumber}</div> }\n                        <button id=\"submit\" className=\"button_label\" onClick={this.submitValue}>Next</button>\n                    </form> \n                    )\n                }\n                </Formik>\n                    <br></br>\n                <div className=\"sub_title\">Already have an account? <a className=\"link_color\"href=\"\">Log in</a></div>\n                    </>\n                    :\n                    <></> \n                }\n                {\n                    this.state.companyDetails ?\n                    <>\n                    <DisplayDetails\n                            submitValue={this.submitValue}\n                            handleChange={this.handleChange}\n                            isShowLogin={this.state.isShowLogin}\n                            companyDetails={this.state.companyDetails}\n                        />\n                        </> :<></>\n                }\n            </div>\n\n        )\n    }\n}\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }\r\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter  basename={`${process.env.PUBLIC_URL}`}><App /></BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}